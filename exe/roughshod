#!/usr/bin/env ruby

require "rugged"
require "trollop"
require "json"

opts = Trollop::options do
  opt :number_of_commits, "Maximum number of commits to consider", :type => :integer, :default => 3_000
  opt :print_every, "Print a working message every X commits", :type => :integer, :default => 500
  opt :touch_penalty, "How 'bad' each touch to a file counts as", :type => :integer, :default => 5
  #opt :monkey, "Use monkey mode"                    # flag --monkey, default false
  #opt :name, "Monkey name", :type => :string        # string --name <s>, default nil
  #opt :num_limbs, "Number of limbs", :default => 4  # integer --num-limbs <i>, default to 4
end

if ARGV.size > 0
  raise "Unrecognized arguments: #{ARGV.inspect}!"
end

repo = Rugged::Repository.new "."
target = repo.head.target

puts "Analyzing repo as of commit #{repo.head.target_id.inspect}"

# TODO: merge commits w/ multiple parents

file_details = {}

# d = repo.head.target.diff(repo.head.target.parents[0].parents[0])
change = target
changes_backward = opts[:number_of_commits]
last_print = changes_backward
while changes_backward > 0
  diff = change.diff(change.parents[0])
  diff.each_patch do |patch|
    delta = patch.delta
    path = delta.old_file[:path]
    file_details[path] ||= { :change_score => 0, :last_oid => delta.new_file[:oid], :churn_events => [] }
    file_details[path][:churn_events] << { :lines => patch.lines, :file_size => delta.new_file[:size] }
    point_change = patch.lines + opts[:touch_penalty]
    #puts "Applying change of #{point_change} (#{delta.old_file[:size].inspect} -> #{delta.new_file[:size].inspect}) to file #{path.inspect}..."
    file_details[path][:change_score] += point_change
  end
  break unless change.parents[0]
  break if change.parents[0] == change
  change = change.parents[0]

  if(last_print - changes_backward >= opts[:print_every])
    puts "Working... (#{opts[:number_of_commits] - changes_backward}/#{opts[:number_of_commits]} commits processed)"
    last_print -= opts[:print_every]
  end

  changes_backward -= 1
end

def list_median(list)
  list = list.sort
  size = list.size
  if size % 1 == 0
    # Even-sized list
    # Example: list length 10, take mean of list[4] and list[5]
    (list[size / 2] + list[size / 2 - 1]) / 2.0
  else
    # Odd-sized list
    # Example: list length 7, take list[3]
    list[size / 2]
  end
end

def tree_entry_for(repo, tree, path)
  path_sections = path.split("/")
  dirs = path_sections[0..-2]

  parent = tree
  while dirs.size > 0
    next_dir = dirs.shift
    entry = parent.get_entry next_dir
    #raise "Couldn't get entry for subdir #{next_dir.inspect} in tree_entry_for(repo, tree, #{path.inspect})!" unless entry
    return nil unless entry
    next_oid = entry[:oid]
    parent = repo.lookup next_oid
  end
  parent.get_entry path_sections[-1]
end

file_info = []
head_tree = repo.head.target.tree
file_details.each do |path, h|
  points = h[:change_score]
  last_oid = h[:last_oid]
  git_obj_entry = tree_entry_for repo, head_tree, path
  deleted = !git_obj_entry || last_oid == "0000000000000000000000000000000000000000"
  #raise "Can't find Git entry for #{path.inspect}!" unless git_obj_entry
  file_content = deleted ? "" : repo.lookup(last_oid).text
  deleted = true if file_content == ""
  linecount = file_content.lines.count
  churn = deleted ? 0.0 : points.to_f / linecount

  # Now calculate the various churn metrics...
  num_changes = h[:churn_events].size
  churn_lines = h[:churn_events].map { |ev| ev[:lines] }
  median_lines_of_change = list_median churn_lines
  percent_churn_by_event = h[:churn_events].map { |ev| ev[:file_size] == 0 ? 0.0 : (ev[:lines].to_f / ev[:file_size]) }

  composite = deleted ? 0.0 :
    list_median(percent_churn_by_event) * Math.log(h[:churn_events][-1][:file_size]) * h[:churn_events].size
  composite = 0.0 if composite.nan? || composite.infinite?

  file_info << [path, points, linecount, churn, deleted, {
      churn_median_lines: median_lines_of_change,
      churn_mean_lines: churn_lines.size == 0 ? 0.0 : (churn_lines.inject(0.0, &:+) / churn_lines.size),
      median_churn_per_change: list_median(percent_churn_by_event),
      mean_churn_per_change: percent_churn_by_event.inject(0.0, &:+) / percent_churn_by_event.size,
      composite: composite,
    }]
end

by_points = file_info.sort_by { |path, points, linecount, churn, deleted, metrics| deleted ? 0.0 : metrics[:composite] }

File.open("/tmp/roughshod_metrics_#{Time.now.to_i}.json", "w+") do |f|
  f.write JSON.pretty_generate(by_points)
end

puts "Filename: Churn metric, linecount:"
by_points.each do |path, points, linecount, churn, deleted, metrics|
  puts "#{path}: #{metrics[:composite]}" unless deleted
end
